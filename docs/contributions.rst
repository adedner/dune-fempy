.. toctree::
   :maxdepth: 1

   twophaseflow_descr
   vemdemo_descr


.. _contributing:

*********************************************
**:red:`How to show case your own project`**
*********************************************

Contributions are very welcomed - this can include pointing out typos,
suggestion places were the description should be improved, providing this
improvement, and so on. In addition we would like to showcase what user
have used this package for, by adding sections to the :ref:`userprojects` chapter:

To do this provide us with a file *projectname_descr.rst* with a short
description of your project with the authors and links to the project web
page, journal article and so on.
The following is an example taken from the description file of the
:download:`vem project<vemdemo_descr.rst>`

.. code-block:: rst

   ########################################################
   *dune-vem*: implementation of the virtual element method
   ########################################################

   .. sectionauthor:: Andreas Dedner <a.s.dedner@warwick.ac.uk>, Martin Nolte <nolte.mrtn@gmail.com>

   This module is based on DUNE-FEM (https://www.dune-project.org/modules/dune-fem)
   and provides implementation for the Virtual Element Method. The methods and
   a Python frontend based on the new Python extension to DUNE
   (https://dune-project.org/modules/dune-python) is available in the
   http://www.dune-project.org/modules/dune-fem/dune-vem.

   .. toctree::
      :maxdepth: 3

      vemdemo.rst

The *vemdemo.rst* file can be automatically generated by downloading our
:download:`conversion script<nbscript2rst.sh>`. It takes the name of a python script
file as argument, generates a jupyter notebook and the restructured text
file. So running *bash nbscript2rst.sh projectname.py* will generate the
files *projectname_nb.ipynb, projectname.rst*, and image files in the
folder *projectname_files*. Send us these files
in addition to the description file (e.g. as a *tar.gz* file)
and that's it. You can also fork this repo and set up a pull request.

Your python script file *myproject.py* can contain both *markdown* parts for
additional descriptions between python code blocks similar to
a jupyter notebook
(see e.g. the :download:`script<vemdemo.py>` for the virtual element project).
This file will be translated into a :download:`jupyter notebook<vemdemo_nb.ipynb>`
which will also be made available for download. And then *nbconvert* is used to
generate the :download:`restructured text file<vemdemo.rst>` used in the
documentation. The syntax for combining markdown cells and python code
is straightforward:

.. code-block::

   # <markdowncell>
   # # Laplace problem
   #
   # We first consider a simple Laplace problem with Dirichlet boundary conditions
   # \begin{align*}
   #   -\Delta u &= f, && \text{in } \Omega, \\
   #           u &= g, && \text{on } \partial\Omega,
   # \end{align*}
   # with $\Omega=[-\frac{1}{2},1]^2$ and choosing the forcing and the boundary conditions
   # so that the exact solution is equal to
   # \begin{align*}
   #   u(x,y) &= xy\cos(\pi xy)
   # \end{align*}

   # First some setup code:
   # <codecell>
   import dune.vem
   from dune.grid import cartesianDomain, gridFunction
   from dune.vem import voronoiCells
   from ufl import *
   import dune.ufl

   # <markdowncell>
   # Now we define the model starting with the exact solution:

   # <codecell>
   uflSpace = dune.ufl.Space(2, dimRange=1)
   x = SpatialCoordinate(uflSpace)
   exact = as_vector( [x[0]*x[1] * cos(pi*x[0]*x[1])] )

   # next the bilinear form
   u = TrialFunction(uflSpace)
   v = TestFunction(uflSpace)
   a = (inner(grad(u),grad(v))) * dx

If you have any questions or something in unclear let us know!
