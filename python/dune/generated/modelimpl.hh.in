#include <dune/fempy/pybind11/pybind11.h>

#include <dune/fem/gridpart/leafgridpart.hh>
#include <dune/fem/gridpart/adaptiveleafgridpart.hh>

// #include <dune/fempy/gridfunction.hh>

#include <dune/fem/schemes/diffusionmodel.hh>
#include "ModelTmp.hh"

typedef #GRIDPARTCHOICE GridPart;
namespace ModelTmp
{
  struct PyModel : public Model< GridPart#PYTEMPLATE >
  {
    typedef PyModel This;
    typedef DiffusionModelWrapper<This> Wrapper;
    typedef typename Wrapper::Base BaseModel;
    PyModel()
    {}
    ~PyModel()
    {
      std::cout << "In PyModel destructor" << std::endl;
    }
    int getDimRange()
    {
      return #DIMRANGE;
    }
  };

  typedef DiffusionModelWrapper<PyModel> ModelWrapperType;
  std::shared_ptr<ModelWrapperType> wrap(std::shared_ptr<PyModel> &model)
  {
    return make_shared<ModelWrapperType>(model);
  }

  int getDimRange()
  {
    return #DIMRANGE;
  }
}

PYBIND11_PLUGIN(#MODELNAME) {
  using namespace pybind11;
  using namespace ModelTmp;
  typedef typename ModelWrapperType::Base ModelBase;
  class_< PyModel > ( std::shared_ptr< PyModel >, "get" )
  .def( "getDimRange", &PyModel::getDimRange )
  .def("wrap",&wrap)
  #PYSETCOEFFICIENT
  ;
  class_< ModelBase> ( std::shared_ptr<ModelBase>, "ModelBase" );
  class_< ModelWrapperType > ( std::shared_ptr< ModelWrapperType >, "ModelWrapper", base<ModelBase>)
  .def("getDimRange", &getDimRange);
}
